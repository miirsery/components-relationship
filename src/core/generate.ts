import { PluginOption } from 'vite'
import { ComponentRelationsType } from './types'
const fs = require('fs')
const path = require('path')

// –û–ø—Ü–∏–∏ –ø–æ —É–º–æ–ª—á–∞–Ω–∏—é
const defaultOptions: ComponentRelationsType = {
  componentsPath: 'src/components',
  searchPath: 'src',
  baseDir: 'app',
  storyFilesPattern: '\\.stories\\.ts$',
  output: {
    path: './',
    fileName: 'component-usage.json',
  }
}

// –ü–ª–∞–≥–∏–Ω –¥–ª—è –æ–±—Ä–∞–±–æ—Ç–∫–∏ –∫–æ–º–ø–æ–Ω–µ–Ω—Ç–Ω—ã—Ö —Å–≤—è–∑–µ–π –∏ –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è —Ñ–∞–π–ª–æ–≤ Storybook
export const componentRelationshipsPlugin = (relationOptions?: ComponentRelationsType): PluginOption => {
  const options = { ...defaultOptions, ...relationOptions }

  return {
    name: 'vite:component-relationships',

    async buildStart() {
      const componentFiles = await getFiles(options.componentsPath as string, /\.vue$/)
      const components = componentFiles.map((file) => path.basename(file, path.extname(file)))
      const componentUsages = await findComponentUsages(components, options)

      await updateStorybookFiles(componentUsages, options)

      console.log('[‚úÖ] –ö–æ–º–ø–æ–Ω–µ–Ω—Ç–Ω—ã–µ —Å–≤—è–∑–∏ —É—Å–ø–µ—à–Ω–æ –æ–±–Ω–æ–≤–ª–µ–Ω—ã –≤ Storybook —Ñ–∞–π–ª–∞—Ö.')

      if (options?.output && typeof options.output === 'object') {
        await writeRelationsInFile(componentUsages, options.output)
      }
      
    },
  }
}

export async function writeRelationsInFile(
  componentUsages: Record<string, string[]>,
  outputOptions: { path: string, fileName: string }
) {
  // –ü—Ä–µ–æ–±—Ä–∞–∑–æ–≤–∞—Ç—å –≤ —Å—Ç—Ä–æ–∫—É JSON
  const jsonString = JSON.stringify(componentUsages, null, 2)

  // –ü–æ—Å—Ç—Ä–æ–∏—Ç—å –ø–æ–ª–Ω—ã–π –ø—É—Ç—å –∫ —Ñ–∞–π–ª—É
  const outputPath = path.resolve(outputOptions.path, outputOptions.fileName)

  // –£–±–µ–¥–∏—Ç—å—Å—è, —á—Ç–æ –¥–∏—Ä–µ–∫—Ç–æ—Ä–∏—è —Å—É—â–µ—Å—Ç–≤—É–µ—Ç, –µ—Å–ª–∏ –Ω–µ—Ç ‚Äî —Å–æ–∑–¥–∞—Ç—å
  await fs.promises.mkdir(outputOptions.path, { recursive: true })

  // –°–æ—Ö—Ä–∞–Ω–∏—Ç—å —Ä–µ–∑—É–ª—å—Ç–∞—Ç –≤ —Ñ–∞–π–ª
  await fs.promises.writeFile(outputPath, jsonString)

  console.log(`[‚úÖ] –ö–æ–º–ø–æ–Ω–µ–Ω—Ç–Ω—ã–µ —Å–≤—è–∑–∏ —Å–æ—Ö—Ä–∞–Ω–µ–Ω—ã –≤ ${outputPath}`)
}

// –§—É–Ω–∫—Ü–∏—è –¥–ª—è –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è —Ñ–∞–π–ª–æ–≤ Storybook
export async function updateStorybookFiles(componentUsages: Record<string, string[]>, options: ComponentRelationsType) {
  for (const component in componentUsages) {
    const usage = componentUsages[component]
    const storyFilePath = path.resolve(options.componentsPath, component, `${component}.stories.ts`)

    console.log(`[üîç] –ü—Ä–æ–≤–µ—Ä–∫–∞ –ø—É—Ç–∏ –∫ —Ñ–∞–π–ª—É: ${storyFilePath}`)
    
    if (fs.existsSync(storyFilePath)) {
      let content = await fs.promises.readFile(storyFilePath, 'utf-8')

      // –°–æ–∑–¥–∞–µ–º —Å—Ç—Ä–æ–∫—É –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏—è –∫–æ–º–ø–æ–Ω–µ–Ω—Ç–∞
      const usageString = `–ò—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏—è –∫–æ–º–ø–æ–Ω–µ–Ω—Ç–∞ ${component}:\n- ${usage.join('\n- ')}`

      // –ó–∞–º–µ–Ω—è–µ–º —Å—É—â–µ—Å—Ç–≤—É—é—â–∏–π –±–ª–æ–∫ meta.parameters –Ω–∞ –Ω–æ–≤—ã–π
      content = content.replace(/meta\.parameters\s*=\s*{[\s\S]*?};\s*/, '') // –£–¥–∞–ª—è–µ–º —Å—Ç–∞—Ä—ã–π –±–ª–æ–∫

      // –§–æ—Ä–º–∏—Ä—É–µ–º –Ω–æ–≤—ã–µ –ø–∞—Ä–∞–º–µ—Ç—Ä—ã
      const newParameters = `
meta.parameters = {
  docs: {
    description: {
      component: \`${usageString}\`
    }
  }
};`

      // –î–æ–±–∞–≤–ª—è–µ–º –Ω–æ–≤—ã–µ –ø–∞—Ä–∞–º–µ—Ç—Ä—ã –≤ —Ñ–∞–π–ª
      content += newParameters.trim() + '\n'

      await fs.promises.writeFile(storyFilePath, content)
      console.log(`[‚úÖ] –û–±–Ω–æ–≤–ª–µ–Ω Storybook —Ñ–∞–π–ª: ${storyFilePath}`)
    } else {
      console.warn(`[‚ö†Ô∏è] –§–∞–π–ª –Ω–µ –Ω–∞–π–¥–µ–Ω: ${storyFilePath}`)
    }
  }
}

// –§—É–Ω–∫—Ü–∏—è –¥–ª—è –ø–æ–∏—Å–∫–∞ –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏—è –∫–æ–º–ø–æ–Ω–µ–Ω—Ç–æ–≤
export async function findComponentUsages(components: string[], options: ComponentRelationsType) {
  const { baseDir, searchPath } = options
  const componentUsages: Record<string, string[]> = {}

  const paths = await getFiles(searchPath as string, /\.(vue)$/)

  for (const filePath of paths) {
    const content = await fs.promises.readFile(filePath, 'utf-8')

    for (const component of components) {
      const camelCaseRegex = new RegExp(`<${component}[^>]*>`, 'g')
      const kebabCaseRegex = new RegExp(`<${toKebabCase(component)}[^>]*>`, 'g')

      if (camelCaseRegex.test(content) || kebabCaseRegex.test(content)) {
        if (!componentUsages[component]) {
          componentUsages[component] = []
        }

        let relativePath = path.relative(baseDir, filePath).replace(/\\/g, '/')
        if (!relativePath.startsWith('.')) {
          relativePath = './' + relativePath
        }

        relativePath = relativePath.replace(/^\.\.\//g, './')
        componentUsages[component].push(relativePath)
      }
    }
  }

  return componentUsages
}

// –§—É–Ω–∫—Ü–∏—è –¥–ª—è –ø—Ä–µ–æ–±—Ä–∞–∑–æ–≤–∞–Ω–∏—è –∏–º–µ–Ω–∏ –∫–æ–º–ø–æ–Ω–µ–Ω—Ç–∞ –≤ kebab-case
export function toKebabCase(str: string) {
  return str.replace(/([a-z])([A-Z])/g, '$1-$2').toLowerCase()
}

// –§—É–Ω–∫—Ü–∏—è –¥–ª—è –ø–æ–ª—É—á–µ–Ω–∏—è —Ñ–∞–π–ª–æ–≤ –∏–∑ –¥–∏—Ä–µ–∫—Ç–æ—Ä–∏–∏ (—Ä–µ–∫—É—Ä—Å–∏–≤–Ω–æ)
export async function getFiles(dir: string, filePattern: RegExp) {
  let files: string[] = []

  const dirents = await fs.promises.readdir(dir, { withFileTypes: true })

  for (const dirent of dirents) {
    const res = path.resolve(dir, dirent.name)
    if (dirent.isDirectory()) {
      files = files.concat(await getFiles(res, filePattern))
    } else if (filePattern.test(res)) {
      files.push(res)
    }
  }

  return files
}
